import React, { useState, useEffect } from 'react';
import { Modal, Form, Input, Select, Button, notification } from 'antd';
import userApi from '../../api/userApi';
import departmentApi from '../../api/departmentApi';
// inline AlertMessage replaced by antd notification (bottomRight)

const { Option } = Select;

const CreateUserDialog = ({ visible, onClose, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [departments, setDepartments] = useState([]);
  const [departmentsLoading, setDepartmentsLoading] = useState(false);

  // üîπ Load danh s√°ch ph√≤ng ban khi m·ªü modal
  useEffect(() => {
    if (!visible) return;

    const fetchDepartments = async () => {
      setDepartmentsLoading(true);
      try {
        const res = await departmentApi.getDepartments();
        if (res?.data?.success && Array.isArray(res.data.data)) {
          // Chu·∫©n ho√°: ƒë·∫£m b·∫£o m·ªói ph√≤ng c√≥ tr∆∞·ªùng `id` (d√πng dep.id l√†m value)
          setDepartments(
            res.data.data.map((d) => ({ ...d, id: d.id ?? d._id }))
          );
        } else {
          setDepartments([]);
        }
      } catch (error) {
        console.error('Fetch departments failed:', error);
        setDepartments([]);
      } finally {
        setDepartmentsLoading(false);
      }
    };

    fetchDepartments();
  }, [visible]);

  // üîπ Submit form
  const handleSubmit = async (values) => {
    try {
      setLoading(true);
      // using notification instead of inline alert

      console.log('form values:', values); // debug: ki·ªÉm tra values.department

      const payload = {
        ...values,
        department: values.department, 
      };

      const res = await userApi.createUser(payload);

      if (res?.data?.success) {
        notification.success({ message: 'Th√†nh c√¥ng', description: res.data.message || 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng', placement: 'bottomRight' });
        form.resetFields();
        if (onSuccess) onSuccess();
      } else {
        notification.error({ message: 'L·ªói', description: res?.data?.message || 'T·∫°o ng∆∞·ªùi d√πng th·∫•t b·∫°i', placement: 'bottomRight' });
      }
    } catch (error) {
      const msg =
        error?.response?.data?.errors?.[0]?.message ||
        error?.response?.data?.message ||
        'C√≥ l·ªói x·∫£y ra khi t·∫°o ng∆∞·ªùi d√πng';
      notification.error({ message: 'L·ªói', description: msg, placement: 'bottomRight' });
    } finally {
      setLoading(false);
    }
  };

  // üîπ ƒê√≥ng modal
  const handleCancel = () => {
    form.resetFields();
    onClose();
  };

  return (
    <Modal
      title="Th√™m m·ªõi ng∆∞·ªùi d√πng"
      open={visible}
      onCancel={handleCancel}
      footer={null}
      destroyOnClose
    >
  {/* Notifications use antd notification (bottomRight) */}

      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        autoComplete="off"
      >
        <Form.Item
          name="username"
          label="T√™n ƒëƒÉng nh·∫≠p"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p' }]}
        >
          <Input placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
        </Form.Item>

        <Form.Item
          name="name"
          label="H·ªç t√™n"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' }]}
        >
          <Input placeholder="Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß" />
        </Form.Item>

        <Form.Item
          name="password"
          label="M·∫≠t kh·∫©u"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u' }]}
        >
          <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
        </Form.Item>

        <Form.Item
          name="role"
          label="Vai tr√≤"
          rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn vai tr√≤' }]}
        >
          <Select placeholder="Ch·ªçn vai tr√≤" allowClear>
            <Option value="user">User</Option>
            <Option value="admin">Admin</Option>
            <Option value="super_admin">Super Admin</Option>
          </Select>
        </Form.Item>

        <Form.Item
          name="phone"
          label="S·ªë ƒëi·ªán tho·∫°i"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
            {
              pattern: /^[0-9]{9,11}$/,
              message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
            },
          ]}
        >
          <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
        </Form.Item>

        <Form.Item
          name="department"
          label="Ph√≤ng ban"
          rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ph√≤ng ban' }]}
        >
          <Select
            loading={departmentsLoading}
            placeholder="Ch·ªçn ph√≤ng ban"
            allowClear
            showSearch
            optionFilterProp="children"
          >
            {departments.map((dep) => (
              <Option key={dep.id ?? dep._id} value={dep.id ?? dep._id}>
                {dep.name}
              </Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item>
          <Button
            type="primary"
            htmlType="submit"
            loading={loading}
            block
            disabled={loading}
          >
            {loading ? 'ƒêang th√™m...' : 'Th√™m m·ªõi'}
          </Button>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default CreateUserDialog;
